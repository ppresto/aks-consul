---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30056
  selector:
    app: frontend
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend
automountServiceAccountToken: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
data:
  config: |
    # /etc/nginx/conf.d/default.conf
    server {
        listen       80;
        server_name  localhost;
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # Proxy pass the api location to save CORS
        # Use location exposed by Consul connect
        location /api {
          set $upstream http://pub-api.query.consul:8080;
          proxy_pass "$upstream";
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-init
data:
  config: |
    cat <<EOF > /app/service.json
    {
      "Name": "frontend",
      "Tags": ["application","production"],
      "Address": "${POD_IP}",
      "Port": 80,
      "Checks": [
        {
          "Name": "Nginx-http-80",
          "DeregisterCriticalServiceAfter": "1m",
          "Method": "GET",
          "HTTP": "http://${POD_IP}:80",
          "Interval": "5s",
          "Timeout": "4s"
        },
        {
          "Name": "Nginx API Proxy",
          "HTTP": "http://${POD_IP}:80/api",
          "TLSSkipVerify": true,
          "Method": "POST",
          "Header": {"Content-Type": ["application/json"]},
          "Body": "{\"query\":\"{coffees{id name image price teaser description}}\"}",
          "Interval": "5s",
          "Timeout": "2s"
        }
      ]
    }
    EOF

---

# Web Frontend

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      service: frontend
      app: frontend
  template:
    metadata:
      labels:
        service: frontend
        app: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
    spec:
      serviceAccountName: frontend
      volumes:
      - name: config
        configMap:
          name: nginx-configmap
          items:
          - key: config
            path: default.conf
      - name: consul-init
        configMap:
          name: frontend-init
          items:
          - key: config
            path: service.sh
      containers:
        - name: frontend
          image: hashicorpdemoapp/frontend:v0.0.3
          ports:
            - containerPort: 80
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d
              readOnly: true
      initContainers:
        - name: consul-init
          image: ppresto/consul-init:0.2.9
          volumeMounts:
            - name: consul-init
              mountPath: /consul
              readOnly: false
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
